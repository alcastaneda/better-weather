{"version":3,"sources":["Forecast.js","Results.js","SearchParams.js","index.js"],"names":["Forecast","props","date","maxTemp","minTemp","description","icon","wind","hero","className","src","alt","Results","forecast","length","map","dayForecast","key","id","applicable_date","max_temp","toFixed","min_temp","weather_state_name","weather_state_abbr","wind_speed","wind_direction_compass","SearchParams","useState","setForecast","getData","url","a","result","fetch","method","mode","headers","then","response","json","data","lat","lng","metaweatherLocationSearch","location","weatherUrl","woeid","weather","consolidated_weather","style","width","onPlaceSelected","place","console","log","getWeather","geometry","types","ReactDOM","render","path","document","getElementById"],"mappings":"mNAwBeA,G,MArBE,SAAAC,GAAU,IACjBC,EAAoDD,EAApDC,KAAMC,EAA8CF,EAA9CE,QAASC,EAAqCH,EAArCG,QAASC,EAA4BJ,EAA5BI,YAAaC,EAAeL,EAAfK,KAAMC,EAASN,EAATM,KAE7CC,EAAI,yDAAqDF,EAArD,QAEV,OACE,yBAAKG,UAAU,kBACb,yBAAKA,UAAU,mBACb,yBAAKC,IAAKF,EAAMG,IAAI,kBAEtB,yBAAKF,UAAU,QACb,4BAAKP,GACL,2BAAIG,GACJ,wCAAcF,GACd,wCAAcC,GACd,oCAAUG,OCWHK,EA1BC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACE,yBAAKJ,UAAU,WACXI,EAASC,OAGTD,EAASE,KAAI,SAAAC,GACX,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAYE,GACjBhB,KAAMc,EAAYG,gBAClBhB,QAASa,EAAYI,SAASC,QAAQ,GACtCjB,QAASY,EAAYM,SAASD,QAAQ,GACtChB,YAAaW,EAAYO,mBACzBjB,KAAMU,EAAYQ,mBAClBjB,KAAI,UAAKS,EAAYS,WAAWJ,QAAQ,GAApC,iBACFL,EAAYU,6BAZpB,qD,uBC6COC,EA/CM,WAAO,IAAD,EACOC,mBAAS,IADhB,mBAClBf,EADkB,KACRgB,EADQ,cAGVC,EAHU,8EAGzB,WAAuBC,GAAvB,eAAAC,EAAA,6DACQC,EAASC,MAAMH,EAAK,CACxBI,OAAQ,MACRC,KAAM,OACNC,QAAS,CACP,8BAA+B,IAC/B,eAAgB,sBAGjBC,MAAK,SAASC,GACb,OAAOA,EAASC,UAEjBF,MAAK,SAASG,GAEb,OAAOA,KAdb,kBAgBSR,GAhBT,4CAHyB,kEAsBzB,WAA0BS,EAAKC,GAA/B,qBAAAX,EAAA,6DACQY,EADR,wGACqIF,EADrI,YAC4IC,GAD5I,SAEyBb,EAAQc,GAFjC,cAEQC,EAFR,OAGQC,EAHR,uFAGqGD,EAAS,GAAGE,MAHjH,cAIwBjB,EAAQgB,GAJhC,OAIQE,EAJR,OAKEnB,EAAYmB,EAAQC,sBAAwB,IAL9C,4CAtByB,sBA8BzB,OACE,yBAAKxC,UAAU,iBACb,kBAAC,IAAD,CACEyC,MAAO,CAAEC,MAAO,OAChBC,gBAAiB,SAAAC,GACfC,QAAQC,IAAIF,GAnCK,sCAsCjBG,CAFYH,EAAMI,SAASZ,SAASH,MACxBW,EAAMI,SAASZ,SAASF,QAGtCe,MAAO,CAAC,cAEV,kBAAC,EAAD,CAAS7C,SAAUA,MChCzB8C,IAASC,OAAO,mBAXJ,WACV,OACE,6BACE,gCACE,gDAEF,kBAAC,EAAD,CAAcC,KAAK,SAKT,MAASC,SAASC,eAAe,W","file":"static/js/main.033fcf9b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nconst Forecast = props => {\n  const { date, maxTemp, minTemp, description, icon, wind } = props;\n\n  const hero = `https://www.metaweather.com/static/img/weather/${icon}.svg`;\n\n  return (\n    <div className=\"daily-forecast\">\n      <div className=\"image-container\">\n        <img src={hero} alt=\"Weather Icon\" />\n      </div>\n      <div className=\"info\">\n        <h3>{date}</h3>\n        <p>{description}</p>\n        <p>Max Temp: {maxTemp}</p>\n        <p>Min Temp: {minTemp}</p>\n        <p>Wind: {wind}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Forecast;\n","import React from \"react\";\nimport Forecast from \"./Forecast\";\n\nconst Results = ({ forecast }) => {\n  return (\n    <div className=\"results\">\n      {!forecast.length ? (\n        <h1>No Forecast To Show</h1>\n      ) : (\n        forecast.map(dayForecast => {\n          return (\n            <Forecast\n              key={dayForecast.id}\n              date={dayForecast.applicable_date}\n              maxTemp={dayForecast.max_temp.toFixed(2)}\n              minTemp={dayForecast.min_temp.toFixed(2)}\n              description={dayForecast.weather_state_name}\n              icon={dayForecast.weather_state_abbr}\n              wind={`${dayForecast.wind_speed.toFixed(2)} MPH, ${\n                dayForecast.wind_direction_compass\n              }`}\n            />\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nexport default Results;\n","import React, { useState, useEffect } from \"react\";\nimport Results from \"./Results\";\nimport regeneratorRuntime from \"regenerator-runtime/runtime\";\nimport Autocomplete from \"react-google-autocomplete\";\n\nconst SearchParams = () => {\n  const [forecast, setForecast] = useState([]);\n\n  async function getData(url) {\n    const result = fetch(url, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(data) {\n        // `data` is the parsed version of the JSON returned from the above endpoint.\n        return data;\n      });\n    return result;\n  }\n\n  async function getWeather(lat, lng) {\n    const metaweatherLocationSearch = `https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?lattlong=${lat},${lng}`;\n    const location = await getData(metaweatherLocationSearch);\n    const weatherUrl = `https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/${location[0].woeid}/`;\n    const weather = await getData(weatherUrl);\n    setForecast(weather.consolidated_weather || []);\n  }\n\n  return (\n    <div className=\"search-params\">\n      <Autocomplete\n        style={{ width: \"90%\" }}\n        onPlaceSelected={place => {\n          console.log(place);\n          const lat = place.geometry.location.lat();\n          const lng = place.geometry.location.lng();\n          getWeather(lat, lng);\n        }}\n        types={[\"(cities)\"]}\n      />\n      <Results forecast={forecast} />\n    </div>\n  );\n};\n\nexport default SearchParams;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SearchParams from \"./SearchParams\";\n\nconst App = () => {\n  return (\n    <div>\n      <header>\n        <h1>Better Weather!</h1>\n      </header>\n      <SearchParams path=\"/\" />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}